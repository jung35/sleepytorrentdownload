#!/usr/bin/env node
var debug = require('debug')('src');
var app = require('../app');
var torrentStream = require('torrent-stream');
var async = require('async');
var cache = require('memory-cache');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

var io = require('socket.io').listen(server);


var torrentTmp = 'C:/wamp/www/sleepytorrentdownload/src';
var torrentFilePath = 'C:/wamp/www/sleepytorrentdownload/src/download';


io.on('connection', function(socket) {
  socket.on('newTorrent', function(torrents, cb) {
    var errorFiles = [];
    torrents.forEach(function(torrent) {
      console.log('[TORRENT] Req');
      try {
        var engine = torrentStream(torrent.magnet, {tmp : torrentTmp});
        var torrentInfo = {
          id: 0,
          name: torrent.name,
          hash: null,
          time: (+new Date),
          files: []
        };
        engine.on('ready', function() {
          torrentInfo.hash = engine.torrent.infoHash.toUpperCase();
          app.mysql.query('INSERT INTO torrent SET ?',
            {

              name: torrent.name,
              magnet: torrent.magnet,
              hash: engine.torrent.infoHash.toUpperCase(),
              createdat: Math.round(+new Date / 1000)


            }, function(err, result) {
              if (err) throw err;

              var torrentFiles = [];
              var torrentpath;

              torrentInfo.id = result.insertId;

              engine.files.forEach(function(file) {
                torrentpath = file.path.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/\\/g, "/");
                torrentFiles.push([
                  result.insertId,
                  torrentpath,
                  file.length
                ]);

                torrentInfo.files.push({
                  path: file.path,
                  size: file.length
                });
              });

              app.mysql.query('INSERT INTO `files` (`torrentid`, `filename`, `filesize`) VALUES ?', [torrentFiles], function(err, result) {
                if (err) throw err;

                console.log('newTorrent', torrentInfo);
                io.emit('newTorrent', torrentInfo);
              });
            }
          );
        });
      } catch(err) {
        errorFiles.push(torrent.name);
        console.log(err);
      }
    });

    if(errorFiles.length != 0) {
      cb(errorFiles);
    }
  });


  socket.on('delTorrent', function(id, cb) {

    console.log('deleting #'+id);

    app.mysql.query('DELETE FROM torrent WHERE id = ?', id, function(err, result) {
      if(err) {
        cosole.log(err);
        cb(err);
      } else {
        app.mysql.query('DELETE FROM files WHERE torrentid = ?', id, function(err, result) {
          if(err) {
            cosole.log(err);
            cb(err);
          } else {
            console.log('successfully deleted #'+id);
            io.emit('delTorrent', id);

            var currTorrent = cache.get('currentTorrent');
            if(currTorrent && currTorrent.id == id) {
              stopDownloading();
            }
          }
        });
      }
    });
  });


  socket.on('torrentPlayPause', function(cb) {
  });
});

// Update Cache
function prepareTorrent() {
  app.mysql.query('SELECT * \
    FROM torrent \
    WHERE deletedat IS NULL \
    AND downloadedat IS NULL \
    AND compressedat IS NULL',
    function(err, results) {
      if(results.length > 0) {
        var cacheName = 'tPiece';
        var result;
        var getCache = cache.get(cacheName) || {};

        for(var i = 0; i < results.length; i++) {
          result = results[i];
          if(!getCache[result.id] || getCache[result.id] < result.dlpieces) {
            getCache[result.id] = result.dlpieces;
          }
        }
        cache.put(cacheName, getCache);
        startTorrenting(results[0]);
      }
    }
  );
}


function startTorrenting(torrent) {

  cache.put('currentTorrent', torrent);

  app.engine = torrentStream(torrent.magnet, {tmp : torrentTmp, path : torrentFilePath+'/#'+torrent.id});
  app.engine.swarm.resume();

  app.engine.on('ready', function() {
    console.log('starting to read files for #'+torrent.id);
    app.engine.files.forEach(function(file) {
      file.createReadStream();
    });

    var prevnum = -1;

    async.whilst(function () {
      return typeof app.engine == 'object';
    },
    function (callback) {
      var currentTorrentId = cache.get('currentTorrent').id;
      pieces = app.engine.torrent.pieces.length;
      dlpieces = cache.get('tPiece')[currentTorrentId];

      dlsize = app.engine.swarm.downloaded;
      dlspeed = app.engine.swarm.downloadSpeed();

      upsize = app.engine.swarm.uploaded;
      upspeed = app.engine.swarm.uploadSpeed();

      var updatedInfo = {
        pieces: pieces,
        dlpieces: dlpieces,

        dlsize: dlsize,
        dlspeed: dlspeed,

        upsize: upsize,
        upspeed: upspeed,
      };

      if(prevnum != dlpieces) {
        app.mysql.query('UPDATE torrent SET ? WHERE id = ?', [updatedInfo, currentTorrentId]);
        console.log('#'+currentTorrentId+') Progress : '+dlpieces+' / '+pieces);
      }

      prevnum = dlpieces;
      io.emit('torrentProgress', [updatedInfo, currentTorrentId]);

      if(dlpieces >= pieces) {
        app.mysql.query('UPDATE torrent SET downloadedat = ? WHERE id = ?', [Math.round(+new Date / 1000), currentTorrentId]);
        console.log('finished downloading #'+currentTorrentId);
        //preparecompress();
        stopDownloading();
      } else {
        setTimeout(callback, 100);
      }
    },
    function (err) {
      console.log(err);
    });
  });

  app.engine.on('download', function(piece) {
    var cacheName = 'tPiece';
    var pieceCount = cache.get(cacheName);
    pieceCount[cache.get('currentTorrent').id]++;
    cache.put(cacheName, pieceCount);
  });
}

function stopDownloading() {
  app.engine.destroy();
  app.engine = '';
  cache.del('currentTorrent');
  lookForTorrent();
}

function lookForTorrent() {
  async.whilst(function () {
      return typeof app.engine != 'object';
  },
  function (callback) {
    console.log('looking for torrent', typeof app.engine);
    prepareTorrent();
    setTimeout(callback, 1000);
  },
  function (err) {
    // console.log(err);
  });
}

lookForTorrent();
